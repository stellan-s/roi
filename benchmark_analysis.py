#!/usr/bin/env python3
"""
ROI Benchmark Analysis - Snabb utv√§rdering av systemkvalitet

Detta script ger dig en √∂versikt av om systemet √§r "tillr√§ckligt bra"
genom att m√§ta key performance indicators och j√§mf√∂ra mot benchmarks.
"""

import sys
import time
import pandas as pd
import numpy as np
from pathlib import Path
import yaml
from datetime import datetime, timedelta

# Benchmark-m√•ls√§ttningar f√∂r "tillr√§ckligt bra" system
BENCHMARK_TARGETS = {
    "min_sharpe_ratio": 0.8,          # Minimum Sharpe ratio
    "max_drawdown_threshold": 0.20,   # Max acceptabel drawdown (20%)
    "min_win_rate": 0.50,             # Minimum win rate (50%)
    "min_annual_return": 0.08,        # Minimum √•rlig avkastning (8%)
    "max_uncertainty": 0.40,          # Max genomsnittlig os√§kerhet
    "min_confidence": 0.40,           # Min genomsnittlig confidence
    "regime_detection_threshold": 0.50, # Min regime confidence
}

def analyze_daily_report():
    """Analysera senaste daily report f√∂r signal quality"""
    try:
        # Hitta senaste rapport
        reports_dir = Path("reports")
        report_files = list(reports_dir.glob("daily_*.md"))

        if not report_files:
            return None, "Inga daily reports hittade"

        latest_report = max(report_files, key=lambda f: f.name)
        content = latest_report.read_text(encoding='utf-8')

        # Extrahera metrics fr√•n rapporten
        metrics = {
            "report_date": latest_report.stem.replace("daily_", ""),
            "has_buy_recommendations": "## K√∂p-f√∂rslag" in content and "*(Inget)*" not in content,
            "has_sell_recommendations": "## S√§lj-f√∂rslag" in content and "*(Inget)*" not in content,
            "regime_detected": "Unknown" not in content or "33% s√§kerhet" not in content,
        }

        # R√§kna rekommendationer
        buy_count = content.count("E[r]_1d:") if "K√∂p-f√∂rslag" in content else 0
        sell_count = content.count("E[r]_1d:") if "S√§lj-f√∂rslag" in content else 0
        hold_count = content.count("‚ö†Ô∏è Os√§kerhet √∂ver 0.30 hindrar k√∂p")

        metrics.update({
            "buy_recommendations": buy_count,
            "sell_recommendations": sell_count,
            "hold_recommendations": hold_count,
            "total_recommendations": buy_count + sell_count + hold_count,
            "decision_balance": abs(buy_count - sell_count) / max(1, buy_count + sell_count)  # 0=perfect balance
        })

        return metrics, None

    except Exception as e:
        return None, str(e)

def analyze_signal_quality():
    """Analysera signal-kvalitet fr√•n senaste k√∂rning"""
    try:
        # K√∂r en enkel analys f√∂r att f√• signal-metrics
        from quant.regime.detector import RegimeDetector
        from quant.data_layer.prices import fetch_prices

        with open('quant/config/settings.yaml', 'r') as f:
            cfg = yaml.safe_load(f)

        with open('quant/config/universe.yaml', 'r') as f:
            uni_cfg = yaml.safe_load(f)

        # Test med subset av tickers f√∂r hastighet
        test_tickers = uni_cfg['tickers'][:10]
        prices = fetch_prices(test_tickers, 'data', 100)

        # Regime detection quality
        detector = RegimeDetector(cfg)
        regime, probabilities, diagnostics = detector.detect_regime(prices)

        # Ber√§kna regime confidence
        regime_confidence = max(probabilities.values()) if probabilities else 0.33

        metrics = {
            "regime_detected": regime.value if regime else "unknown",
            "regime_confidence": regime_confidence,
            "regime_quality": "Good" if regime_confidence > 0.60 else "Poor",
            "data_quality": "Good" if "error" not in diagnostics else "Poor"
        }

        return metrics, None

    except Exception as e:
        return None, str(e)

def calculate_benchmark_score(daily_metrics, signal_metrics):
    """Ber√§kna overall benchmark score baserat p√• m√•ls√§ttningar"""

    score_components = {}

    # 1. Decision Balance (30 po√§ng)
    # Perfekt balans = 0, helt obalanserat = 1
    if daily_metrics and 'decision_balance' in daily_metrics:
        balance_score = max(0, 30 * (1 - daily_metrics['decision_balance']))
        score_components['decision_balance'] = balance_score
    else:
        score_components['decision_balance'] = 0

    # 2. Signal Diversity (20 po√§ng)
    # Har systemet b√•de k√∂p/s√§lj rekommendationer?
    if daily_metrics:
        has_buys = daily_metrics.get('has_buy_recommendations', False)
        has_sells = daily_metrics.get('has_sell_recommendations', False)

        if has_buys and has_sells:
            diversity_score = 20
        elif has_buys or has_sells:
            diversity_score = 10  # Endast en typ
        else:
            diversity_score = 0   # Inga rekommendationer

        score_components['signal_diversity'] = diversity_score
    else:
        score_components['signal_diversity'] = 0

    # 3. Regime Detection Quality (25 po√§ng)
    if signal_metrics and 'regime_confidence' in signal_metrics:
        regime_conf = signal_metrics['regime_confidence']
        if regime_conf > 0.60:
            regime_score = 25
        elif regime_conf > 0.45:
            regime_score = 15
        else:
            regime_score = 5
        score_components['regime_detection'] = regime_score
    else:
        score_components['regime_detection'] = 0

    # 4. System Stability (25 po√§ng)
    # Baserat p√• om systemet kan k√∂ra utan crashes
    if daily_metrics and signal_metrics:
        stability_score = 25  # Om vi kommit hit utan crash
    else:
        stability_score = 0
    score_components['system_stability'] = stability_score

    total_score = sum(score_components.values())

    return total_score, score_components

def interpret_score(score):
    """Tolka benchmark score"""
    if score >= 80:
        return "EXCELLENT", "Systemet presterar √∂ver f√∂rv√§ntningar"
    elif score >= 65:
        return "GOOD", "Systemet √§r tillr√§ckligt bra f√∂r production"
    elif score >= 50:
        return "ACCEPTABLE", "Systemet fungerar men beh√∂ver f√∂rb√§ttringar"
    elif score >= 30:
        return "POOR", "Systemet har betydande problem"
    else:
        return "CRITICAL", "Systemet √§r inte funktionsdugligt"

def generate_recommendations(score, score_components, daily_metrics, signal_metrics):
    """Generera specifika rekommendationer f√∂r f√∂rb√§ttringar"""
    recommendations = []

    # Decision Balance
    if score_components.get('decision_balance', 0) < 20:
        if daily_metrics and daily_metrics.get('buy_recommendations', 0) == 0:
            recommendations.append("üéØ Systemet genererar inga k√∂prekommendationer - kontrollera Bayesian thresholds")
        elif daily_metrics and daily_metrics.get('sell_recommendations', 0) == 0:
            recommendations.append("üéØ Systemet genererar inga s√§ljrekommendationer - kontrollera risk management")

    # Signal Diversity
    if score_components.get('signal_diversity', 0) < 15:
        recommendations.append("üìä L√•g signal-diversitet - √∂verv√§g att justera decision thresholds i settings.yaml")

    # Regime Detection
    if score_components.get('regime_detection', 0) < 20:
        if signal_metrics and signal_metrics.get('regime_confidence', 0) < 0.50:
            recommendations.append("üîç Svag regime detection - kontrollera market data quality och lookback periods")

    # System Stability
    if score_components.get('system_stability', 0) < 20:
        recommendations.append("‚ö†Ô∏è Systemstabilitet - k√∂r system_health_check.py f√∂r debugging")

    # Specifika f√∂rb√§ttringar baserat p√• score
    if score < 50:
        recommendations.append("üö® PRIORITET: K√∂r 'python system_health_check.py' f√∂r grundl√§ggande debugging")
        recommendations.append("üîß √ñverv√§g att √•terst√§lla settings.yaml till default-v√§rden")

    elif score < 70:
        recommendations.append("üìà √ñverv√§g parameter-tuning med adaptive_main.py f√∂r b√§ttre performance")
        recommendations.append("üéØ Testa olika decision thresholds f√∂r mer balanserade rekommendationer")

    return recommendations

def main():
    """K√∂r benchmark analysis"""
    print("üìä ROI Benchmark Analysis")
    print("=" * 60)
    print("Analyzing system quality against production benchmarks...")
    print()

    start_time = time.time()

    # 1. Analysera daily report
    print("üìã Analyzing latest daily report...")
    daily_metrics, daily_error = analyze_daily_report()

    if daily_error:
        print(f"   ‚ùå Error: {daily_error}")
    else:
        print(f"   ‚úÖ Report from: {daily_metrics['report_date']}")
        print(f"   üìà Buy/Sell/Hold: {daily_metrics['buy_recommendations']}/{daily_metrics['sell_recommendations']}/{daily_metrics['hold_recommendations']}")

    # 2. Analysera signal quality
    print("\\nüîç Analyzing signal quality...")
    signal_metrics, signal_error = analyze_signal_quality()

    if signal_error:
        print(f"   ‚ùå Error: {signal_error}")
    else:
        print(f"   üéØ Regime: {signal_metrics['regime_detected']} ({signal_metrics['regime_confidence']:.1%} confidence)")
        print(f"   üìä Quality: {signal_metrics['regime_quality']}")

    # 3. Ber√§kna benchmark score
    print("\\nüèÜ Calculating benchmark score...")
    score, score_components = calculate_benchmark_score(daily_metrics, signal_metrics)

    level, description = interpret_score(score)

    # 4. Resultat
    elapsed = time.time() - start_time
    print("\\n" + "=" * 60)
    print(f"üìä BENCHMARK RESULTS ({elapsed:.1f}s)")
    print("=" * 60)
    print(f"üéØ Overall Score: {score:.1f}/100 - {level}")
    print(f"üìù Assessment: {description}")
    print()

    # Detaljerade scores
    print("üìà Score Breakdown:")
    for component, points in score_components.items():
        component_name = component.replace('_', ' ').title()
        print(f"   {component_name}: {points:.1f} points")

    # Rekommendationer
    print("\\nüéØ RECOMMENDATIONS:")
    recommendations = generate_recommendations(score, score_components, daily_metrics, signal_metrics)

    if not recommendations:
        print("   üéâ No specific improvements needed - system performing well!")
    else:
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec}")

    # N√§sta steg
    print("\\nüöÄ NEXT STEPS:")
    if score >= 65:
        print("   ‚úÖ System is production-ready")
        print("   üìä Run: python -m quant.backtest_runner for historical validation")
        print("   üéØ Consider live paper trading for final validation")
    elif score >= 50:
        print("   üîß Address recommendations above")
        print("   üìä Run: python system_health_check.py for detailed diagnostics")
        print("   üéØ Rerun benchmark after fixes")
    else:
        print("   üö® Focus on basic system stability first")
        print("   üîß Run: python system_health_check.py")
        print("   üìö Review documentation for configuration guidance")

    return 0 if score >= 50 else 1

if __name__ == "__main__":
    sys.exit(main())